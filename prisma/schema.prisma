// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id           String @id @default(cuid())
  title        String
  slug         String
  imageUrl     String
  description  String
  priceInCents Int
  stock        Int

  Category   Category @relation(fields: [categoryId], references: [id])
  categoryId String

  store   Store  @relation(fields: [storeId], references: [id])
  storeId String

  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ProductInOrders ProductInOrders[]
}

model Category {
  id       String    @id @default(uuid())
  title    String
  slug     String
  products Product[]
}

model Store {
  id          String @id @default(cuid())
  imageUrl    String
  title       String
  description String
  cnpj        String

  userId   String
  products Product[]

  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Order     Order[]
}

model Order {
  id String @id @default(uuid())

  fullPriceOrderInCents Int
  storeId               String
  store                 Store             @relation(fields: [storeId], references: [id])
  status                OrderStatus
  customerId            String
  created_at            DateTime          @default(now())
  updated_at            DateTime          @updatedAt()
  productInOrders       ProductInOrders[]
  cupomId               String?
}

model ProductInOrders {
  id String @id @default(cuid())

  product   Product @relation(fields: [productId], references: [id])
  productId String
  quantity  Int

  orders     Order    @relation(fields: [orderId], references: [id])
  orderId    String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt()
}

model Pet {
  id         String  @id @default(cuid())
  name       String
  breed      String
  age        Int
  imageUrl   String
  size       Porte
  customerId String
  isActive   Boolean @default(true)
}

model Cupom {
  id          String @id @default(uuid())
  porcentagem Int

  createdAt  DateTime @default(now())
  ValidateAt DateTime @default(dbgenerated("'2050-02-09T00:00:00.000Z'::timestamp"))
  isValid    Boolean  @default(true)
  storeId    String

  customerId String
}

model Missao {
  id        String   @id @default(uuid())
  descricao String
  concluido Boolean  @default(false)
  createdAt DateTime @default(now())

  customerId String

  timer    Float?
  imageUrl String?
}

model MissionSchema {
  id        String @id @default(cuid())
  descricao String
  
  imageUrl String?
  timer Int?
  isMissionByTimer Boolean @default(false)
  isMissionByImage Boolean @default(false)
}

enum Porte {
  mini
  pequeno
  medio
  grande
  gigante
}

enum OrderStatus {
  pending
  awaiting_payment
  payment_confirmed
  processing
  shipped
  delivered
  canceled
  returned
}
